var blockly_mario;(function(){function e(){var e='"'+this.getTitleValue("VALUE")+'"';return[e,Blockly.JavaScript.ORDER_ATOMIC]}function t(e,t,i){return Blockly.JavaScript.valueToCode(e,t,i)}Blockly.Language.agent_act={init:function(){this.setColour(290),this.appendValueInput("ACTION").appendTitle("activate"),this.setPreviousStatement(!0),this.setNextStatement(!0),this.setTooltip("Activate or keep active the given action. Actions otherwise deactivate at each time step.\n\nTo actually jump or shoot more than once, it must be inactive between.")}},Blockly.Language.agent_action={init:function(){this.setColour(160),this.appendDummyInput().appendTitle(new Blockly.FieldDropdown([["jump","JUMP"],["shoot","SHOOT"],["left","LEFT"],["right","RIGHT"],["up","UP"],["down","DOWN"]]),"VALUE"),this.setOutput(!0,String),this.setTooltip("Choose an action. Jump also starts levels. Shoot also runs faster.")}},Blockly.Language.agent_enemies={init:function(){this.setColour(210),this.appendDummyInput().appendTitle("enemies"),this.setOutput(!0,Array),this.setTooltip("A list of all active enemies.")}},Blockly.Language.agent_enemyTypeOption={init:function(){this.setColour(160),this.appendDummyInput().appendTitle(new Blockly.FieldDropdown([["bullet bill","BULLET_BILL"],["goomba (mushroom enemy)","GOOMBA"],["green koopa (turtle)","GREEN_KOOPA"],["piranha plant","PIRANHA_PLANT"],["red koopa (turtle)","RED_KOOPA"],["shell (green or red)","SHELL"],["spiny (turtle)","SPINY"]]),"VALUE"),this.setOutput(!0,String),this.setTooltip("Choose from the list of possible enemy types.")}},Blockly.Language.agent_mario={init:function(){this.setColour(0),this.appendDummyInput().appendTitle("mario"),this.setOutput(!0,"Sprite"),this.setTooltip("Mario player character.")}},Blockly.Language.agent_mode={init:function(){this.setColour(120),this.appendDummyInput().appendTitle("game mode is").appendTitle(new Blockly.FieldDropdown([["level","LEVEL"],["map","MAP"],["title","TITLE"],["lose","LOSE"],["win","WIN"]]),"MODE"),this.setOutput(!0,Boolean),this.setTooltip("Test the current game mode (screen type).")}},Blockly.Language.agent_onGround={init:function(){this.setColour(120),this.appendDummyInput().appendTitle("on ground (OBSOLETE!!!)"),this.setOutput(!0,Boolean),this.setTooltip("On ground after last time step or not.")}},Blockly.Language.agent_powerUps={init:function(){this.setColour(210),this.appendDummyInput().appendTitle("power-ups"),this.setOutput(!0,Array),this.setTooltip("A list of all active power-ups (mushrooms and fire flowers).")}},Blockly.Language.agent_predicate={init:function(){this.setColour(120),this.appendValueInput("SPRITE"),this.appendDummyInput().appendTitle(new Blockly.FieldDropdown([["on ground","ON_GROUND"],["has fire","HAS_FIRE"],["super (big)","SUPER"],["winged","WINGED"]]),"VALUE"),this.setInputsInline(!0),this.setOutput(!0,Boolean),this.setTooltip("Logical (true or false) condition about the given character.\nSome apply only to Mario or only to enemies. When inapplicable, the value is always false.")}},Blockly.Language.agent_powerUpTypeOption={init:function(){this.setColour(160),this.appendDummyInput().appendTitle(new Blockly.FieldDropdown([["fire flower","FIRE_FLOWER"],["super mushroom (power-up)","SUPER_MUSHROOM"]]),"VALUE"),this.setOutput(!0,String),this.setTooltip("Choose from the list of possible power-up types.")}},Blockly.Language.agent_spriteType={init:function(){this.setColour(160),this.appendValueInput("SPRITE").setCheck("Sprite").appendTitle("type of"),this.setOutput(!0,String),this.setTooltip("Text identifying the type of any character or power-up.")}},Blockly.Language.agent_tileSize={init:function(){this.setColour(230),this.appendDummyInput().appendTitle("tile").appendTitle(new Blockly.FieldDropdown([["radius","RADIUS"],["size","SIZE"]]),"VALUE"),this.setOutput(!0,Number),this.setTooltip('The tile "radius" or full size (edge length).')}},Blockly.Language.agent_tileTypeAt={init:function(){this.setColour(160),this.appendValueInput("X").setCheck(Number).appendTitle("tile type at x"),this.appendValueInput("Y").setCheck(Number).appendTitle("y"),this.setInputsInline(!0),this.setOutput(!0,String),this.setTooltip("Tile type at pixel offset (x, y) from Mario's center.")}},Blockly.Language.agent_tileTypeOption={init:function(){this.setColour(160),this.appendDummyInput().appendTitle(new Blockly.FieldDropdown([["air","AIR"],["brick","BRICK"],["coin","COIN"],["off screen","OFF_SCREEN"],["pipe","PIPE"],["question","QUESTION"],["solid","SOLID"],["surface (top only)","SURFACE"]]),"VALUE"),this.setOutput(!0,String),this.setTooltip("Choose from the list of possible tile types.")}},Blockly.Language.agent_value={init:function(){this.setColour(230),this.appendValueInput("SPRITE"),this.appendDummyInput().appendTitle(new Blockly.FieldDropdown([["facing x","FACING_X"],["offset x","OFFSET_X"],["offset y","OFFSET_Y"],["position x","POSITION_X"],["position y","POSITION_Y"],["radius x","RADIUS_X"],["radius y","RADIUS_Y"],["velocity x","VELOCITY_X"],["velocity y","VELOCITY_Y"]]),"VALUE"),this.setInputsInline(!0),this.setOutput(!0,Number),this.setTooltip("Get the requested value for the given animated character.\nPositions are refer to center points, where right is +X and up is +Y.\nMario's origin point is the center of the screen, and all other characters are relative to Mario.\nOffset is from tile center.\nFacing is -1 (left), 1 (right), or even 0 (for some nonmoving characters).")}},Blockly.JavaScript.agent_act=function(){var e=t(this,"ACTION",Blockly.JavaScript.ORDER_NONE),i=["$$actions[",e,"] = true;\n"].join("");return i},Blockly.JavaScript.agent_action=e,Blockly.JavaScript.agent_enemies=function(){return["$$support.enemies()",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.agent_enemyTypeOption=e,Blockly.JavaScript.agent_mario=function(){return["Mario.MarioCharacter",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.agent_mode=function(){var e={LEVEL:"Mario.LevelState",LOSE:"Mario.LoseState",MAP:"Mario.MapState",TITLE:"Mario.TitleState",WIN:"Mario.WinState"}[this.getTitleValue("MODE")],t="$$support.gameStateIs("+e+")";return[t,Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.agent_onGround=function(){var e="Mario.MarioCharacter.OnGround";return[e,Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.agent_powerUps=function(){return["$$support.powerUps()",Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.agent_powerUpTypeOption=e,Blockly.JavaScript.agent_predicate=function(){var e=t(this,"SPRITE",Blockly.JavaScript.ORDER_COMMA),i=this.getTitleValue("VALUE"),o=["$$support.spritePredicate(",e,", '",i,"')"].join("");return[o,Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.agent_spriteType=function(){var e=t(this,"SPRITE",Blockly.JavaScript.ORDER_NONE),i=["$$support.spriteType(",e,")"].join("");return[i,Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.agent_tileSize=function(){var e=this.getTitleValue("VALUE"),t=["$$support.tileSize('",e,"')"].join("");return[t,Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.agent_tileTypeAt=function(){var e=t(this,"X",Blockly.JavaScript.ORDER_COMMA),i=t(this,"Y",Blockly.JavaScript.ORDER_COMMA),o=["$$support.tileTypeAt(",e,", ",i,")"].join("");return[o,Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.agent_tileTypeOption=e,Blockly.JavaScript.agent_value=function(){var e=t(this,"SPRITE",Blockly.JavaScript.ORDER_COMMA),i=this.getTitleValue("VALUE"),o=["$$support.spriteValue(",e,", '",i,"')"].join("");return[o,Blockly.JavaScript.ORDER_MEMBER]},Blockly.JavaScript.text_print=function(){var e=t(this,"TEXT",Blockly.JavaScript.ORDER_NONE)||'""';return"console.log("+e+");\n"}})(blockly_mario||(blockly_mario={}));var blockly_mario;(function(e){var t={X:160,Y:120},i=16,o=function(){function e(e){this.app=e}return e.prototype.enemies=function(){if(!this.gameStateIs(Mario.LevelState))return[];var e=this.gameState().Sprites.Objects.filter(function(e){return e instanceof Mario.Enemy||e instanceof Mario.BulletBill||e instanceof Mario.Shell});return e},e.prototype.gameState=function(){return this.app.stateContext.State},e.prototype.gameStateIs=function(e){return this.gameState()instanceof e},e.prototype.powerUps=function(){if(!this.gameStateIs(Mario.LevelState))return[];var e=this.gameState().Sprites.Objects.filter(function(e){return e instanceof Mario.Mushroom||e instanceof Mario.FireFlower});return e},e.prototype.spritePredicate=function(e,t){var i=!1;switch(t){case"ON_GROUND":i=e.OnGround;break;case"HAS_FIRE":i=e.Fire;break;case"SUPER":i=e.Large;break;case"WINGED":i=e.Winged}return i=Boolean(i)},e.prototype.spriteType=function(e){if(e instanceof Mario.BulletBill)return"BULLET_BILL";if(e instanceof Mario.Character)return"MARIO";if(e instanceof Mario.Enemy){if(e instanceof Mario.FlowerEnemy)return"PIRANHA_PLANT";switch(e.Type){case Mario.Enemy.Goomba:return"GOOMBA";case Mario.Enemy.GreenKoopa:return"GREEN_KOOPA";case Mario.Enemy.RedKoopa:return"RED_KOOPA";case Mario.Enemy.Spiky:return"SPINY"}}else{if(e instanceof Mario.FireFlower)return"FIRE_FLOWER";if(e instanceof Mario.Mushroom)return"SUPER_MUSHROOM";if(e instanceof Mario.Shell)return"SHELL"}return"UNKNOWN"},e.prototype.spriteValue=function(e,t){var i=t.split(/_+/),o=i[0],a=i[i.length-1];switch(o){case"FACING":return this.getFacing(e,a);case"OFFSET":return this.getOffset(e,a);case"POSITION":return this.getPosition(e,a);case"RADIUS":return this.getRadius(e,a);case"VELOCITY":return this.getVelocity(e,a)}},e.prototype.tileSize=function(e){var t=i;return"RADIUS"==e&&(t/=2),t},e.prototype.tileTypeAt=function(e,o){var a=this.gameState();if(a instanceof Mario.LevelState){var n=Mario.MarioCharacter;o*=-1,e+=n.X,o+=n.Y,o-=n.Height/2;var r=a.Camera,l=r.X,s=l+2*t.X-1,p=r.Y,c=p+2*t.Y-1;if(l>e||p>o||e>s||o>c)return"OFF_SCREEN";e=Math.floor(e/i),o=Math.floor(o/i);var u=a.Level,h=u.Map[e][o];switch(h){case 0:return"AIR";case 10:case 11:case 26:case 27:return"PIPE";case 16:case 17:case 18:case 19:return"BRICK";case 20:case 21:case 22:case 23:return"QUESTION";case 32:case 33:case 34:case 35:return"COIN";case 4:case 5:case 6:case 7:case 9:case 12:case 28:case 131:case 145:case 147:return"SOLID"}if(h>=128){var y=Mario.Tile.Behaviors[h];switch(y){case 0:return"AIR";case Mario.Tile.BlockAll:return"SOLID";case Mario.Tile.BlockUpper:return"SURFACE"}}console.log("Unknown type: "+h)}else a instanceof Mario.MapState;return"UNKNOWN"},e.prototype.getFacing=function(e){return+e.Facing},e.prototype.getOffset=function(e,o){var a=this.gameState();if(a instanceof Mario.LevelState){var n=e[o];return"Y"==o&&(n*=-1,n+=2*t.Y,n+=e.Height/2-1),n%=i,n-=i/2}return Number.NaN},e.prototype.getPosition=function(e,i){var o,a=Mario.MarioCharacter,n=this.gameState();return n instanceof Mario.LevelState?(e===a?(o=a[i],"X"==i&&(o-=n.Camera.X),o-={X:t.X,Y:t.Y}[i]):o=e[i]-a[i],"Y"==i&&(o-=e.Height/2)):n instanceof Mario.MapState?e===a&&(o=n[i+"Mario"],"Y"==i&&(o-=2*t[i]),o+=8):o=Number.NaN,"Y"===i&&(o*=-1),o},e.prototype.getRadius=function(e,t){try{return"X"==t?e.Width:e.Height/2}catch(i){return Number.NaN}},e.prototype.getVelocity=function(e,t){var i;return i=this.gameStateIs(Mario.LevelState)?e[t+"a"]:Number.NaN,"Y"===t&&(i*=-1),i},e}();e.Support=o})(blockly_mario||(blockly_mario={}));var blockly_mario;(function(blockly_mario){function $(e){return document.getElementById(e)}function $input(e){return $(e)}function copySimpleShallow(e){var t={};for(var i in e)t[i]=e[i];return t}function defineFinishCode(e){return function(t){return e(["var $$actions;","return function() {","$$actions = {};",t,"return $$actions;","};"].join("\n"))}}function defineKeyDown(e){return function(t){if(this.IsActive()&&32==t.keyCode){var i=$input("pause");i.checked=!i.checked,handlePause()}else e.call(this,t)}}function handlePause(){$input("pause").checked?blockly_mario.app.timer.Stop():blockly_mario.app.timer.Start()}function redefine(e,t,i){e[t]=i(e[t])}function storageName(e){return window.location.href.split("#")[0]+"#"+e}function updateCode(){var code=Blockly.Generator.workspaceToCode("JavaScript");code=["(function($$support) {",code,"})"].join("\n");try{aiFunction=eval(code)(new blockly_mario.Support(blockly_mario.app)),$input("ai").disabled=!1,$input("update").disabled=!0}catch(e){throw alert("Error building code."),aiFunction=null,$input("ai").checked=!1,$input("ai").disabled=!0,e}}function workspaceChanged(){$("update").disabled=!1;var e=Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(Blockly.mainWorkspace));window.localStorage.setItem(storageName("blocks"),e)}var aiFunction;blockly_mario.app,window.onload=function(){blockly_mario.app=new Enjine.Application,blockly_mario.app.Initialize(new Mario.LoadingState("../mariohtml5/"),320,240),blockly_mario.app.timer.UpdateObject=new AiUpdate(blockly_mario.app),redefine(Enjine.KeyboardInput,"KeyDownEvent",defineKeyDown),Blockly.inject($("blockly"),{path:"../blockly/",toolbox:$("toolbox")}),redefine(Blockly.JavaScript,"finish",defineFinishCode),Blockly.addChangeListener(workspaceChanged),$("ai").onclick=function(){$input("ai").checked||$("canvas").focus()},$input("pause").checked=!1,$("pause").onclick=handlePause,$("update").onclick=updateCode;var e=localStorage.getItem(storageName("blocks"));if(e){var t=Blockly.Xml.textToDom(e);Blockly.Xml.domToWorkspace(Blockly.mainWorkspace,t)}setTimeout(function(){updateCode()},0)};var AiUpdate=function(){function e(e){this.base=e}return e.prototype.Update=function(e){var t,i=$input("ai").checked&&Boolean(aiFunction);if(i){var o=aiFunction(),a={},n={DOWN:"Down",LEFT:"Left",JUMP:"S",RIGHT:"Right",SHOOT:"A",UP:"Up"};for(var r in o)o[r]&&(a[Enjine.Keys[n[r]]]=!0);t=Enjine.KeyboardInput.Pressed,Enjine.KeyboardInput.Pressed=a,Enjine.KeyboardInput.Element=null}this.base.Update(e),i&&(Enjine.KeyboardInput.Pressed=t,Enjine.KeyboardInput.Element=$("canvas"))},e}()})(blockly_mario||(blockly_mario={}));